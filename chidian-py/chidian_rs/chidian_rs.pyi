# Type stubs for the Rust extension module chidian_rs.chidian_rs
from typing import Any, Optional

def get(
    source: Any,
    key: str,
    default: Optional[Any] = ...,
    apply: Optional[Any] = ...,
    strict: bool = ...,
) -> Any: ...
def put(
    target: dict[str, Any],
    path: str,
    value: Any,
    strict: bool = ...,
) -> dict[str, Any]: ...

class LexiconCore:
    def __init__(
        self,
        forward_mappings: dict[str, str],
        reverse_mappings: dict[str, str],
        default: Optional[str] = ...,
    ) -> None: ...
    def get_bidirectional(self, key: str) -> Optional[str]: ...
    def get_bidirectional_strict(self, key: str) -> str: ...
    def contains_bidirectional(self, key: str) -> bool: ...
    def forward_only(self, key: str) -> Optional[str]: ...
    def reverse_only(self, key: str) -> Optional[str]: ...

class SeedDrop:
    def __init__(self, level: int) -> None: ...
    @property
    def level(self) -> int: ...
    def process(self, data: Any, context: Optional[dict[str, Any]] = ...) -> Any: ...

class SeedKeep:
    def __init__(self, value: Any) -> None: ...
    @property
    def value(self) -> Any: ...
    def process(self, data: Any, context: Optional[dict[str, Any]] = ...) -> Any: ...
